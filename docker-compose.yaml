version: "3.8"

networks:
  esteticar_net:
    driver: bridge

services:
  frontend_a:
    build: .
    container_name: esteticar-frontend-a
    volumes:
      - .:/usr/share/app
    ports:
      - 3020:3000
    restart: always
    networks:
      - esteticar_net

  frontend_b:
    build: .
    container_name: esteticar-frontend-b
    volumes:
      - .:/usr/share/app
    ports:
      - 3021:3000
    restart: always
    networks:
      - esteticar_net

  # elasticsearch:
  #     image: elasticsearch
  #     environment:
  #         - bootstrap.memory_lock=true
  #         - cluster.name=docker-cluster
  #         - cluster.routing.allocation.disk.threshold_enabled=false
  #         - discovery.type=single-node
  #         - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
  #     ulimits:
  #     memlock:
  #         hard: -1
  #         soft: -1
  #     volumes:
  #         - esdata:/usr/share/elasticsearch/data
  #     ports:
  #         - 9200:9200
  #     networks:
  #         - elastic
  #     healthcheck:
  #     interval: 20s
  #     retries: 10
  #     test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  # kibana:
  #     image: kibana
  #     depends_on:
  #     elasticsearch:
  #         condition: service_healthy
  #     environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #     ports:
  #         - 5601:5601
  #     networks:
  #         - elastic
  #     healthcheck:
  #     interval: 10s
  #     retries: 20
  #     test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  # apm_server:
  #     image: elastic/apm-server
  #     container_name: apm_server
  #     ports:
  #         - 6379:6379
  #     restart: always
  #     network_mode: host

  # datadog_agent
  #     image: datadog/agent
  #     container_name: apm_server
  #     ports:
  #         - 6379:6379
  #     restart: always
  #     network_mode: host

  adminer:
    image: adminer
    container_name: esteticar-adminer
    restart: always
    ports:
      - 8100:8080
    networks:
      - esteticar_net

  postgresql:
    image: postgres
    container_name: postgresql
    ports:
      - 5452:5432
    restart: always
    networks:
      - esteticar_net
    # volumes:
    #     - ./storage/postgresql:var/lib/postgresql/data
    environment:
      - POSTGRES_USER=psqlpass
      - POSTGRES_PASSWORD=psqlpass #pgpass
      # - PGDATA=/var/lib/postgresql/data/pgdata
    # volumes:
    #     - /home/felipe/Documents/esteticar/data:var/lib/postgresql/data

  redis-stack:
    image: redis/redis-stack:latest
    container_name: esteticar-redis-stack
    ports:
      - "6399:6379"
      - "8031:8001"
    networks:
      - esteticar_net
    # environment:
    #   - REDIS_PASSWORD=yourpassword
    # volumes:
    #   - redis_data:/data
  # volumes:
  #   redis_data:

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8085:8080" # Porta de acesso ao Jenkins
      - "50000:50000" # Porta para conexão de agentes Jenkins
    volumes:
      - jenkins_home:/var/jenkins_home # Volume para persistência dos dados do Jenkins
      - /var/run/docker.sock:/var/run/docker.sock # Permite que o Jenkins controle o Docker do host
    # environment:
    #   - JAVA_OPTS=-Djenkins.install.runSetupWizard=false # Pula o assistente de configuração inicial
    restart: always
    # network_mode: host

volumes:
  jenkins_home:
